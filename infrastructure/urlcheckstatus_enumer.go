// Code generated by "enumer -type=URLCheckStatus -json -text -transform=lower"; DO NOT EDIT.

package infrastructure

import (
	"encoding/json"
	"fmt"
)

const _URLCheckStatusName = "SkippedOkBrokenDropped"

var _URLCheckStatusIndex = [...]uint8{0, 7, 9, 15, 22}

func (i URLCheckStatus) String() string {
	if i < 0 || i >= URLCheckStatus(len(_URLCheckStatusIndex)-1) {
		return fmt.Sprintf("URLCheckStatus(%d)", i)
	}
	return _URLCheckStatusName[_URLCheckStatusIndex[i]:_URLCheckStatusIndex[i+1]]
}

var _URLCheckStatusValues = []URLCheckStatus{0, 1, 2, 3}

var _URLCheckStatusNameToValueMap = map[string]URLCheckStatus{
	_URLCheckStatusName[0:7]:   0,
	_URLCheckStatusName[7:9]:   1,
	_URLCheckStatusName[9:15]:  2,
	_URLCheckStatusName[15:22]: 3,
}

// URLCheckStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func URLCheckStatusString(s string) (URLCheckStatus, error) {
	if val, ok := _URLCheckStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to URLCheckStatus values", s)
}

// URLCheckStatusValues returns all values of the enum
func URLCheckStatusValues() []URLCheckStatus {
	return _URLCheckStatusValues
}

// IsAURLCheckStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i URLCheckStatus) IsAURLCheckStatus() bool {
	for _, v := range _URLCheckStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for URLCheckStatus
func (i URLCheckStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for URLCheckStatus
func (i *URLCheckStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("URLCheckStatus should be a string, got %s", data)
	}

	var err error
	*i, err = URLCheckStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for URLCheckStatus
func (i URLCheckStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for URLCheckStatus
func (i *URLCheckStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = URLCheckStatusString(string(text))
	return err
}
